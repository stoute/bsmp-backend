var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));

// astro:db:astro:db
var astro_db_exports = {};
__reExport(astro_db_exports, virtual_star);
import * as virtual_star from "@astrojs/db/dist/runtime/virtual.js";

// src/lib/ai/llm.ts
import "@langchain/openai";
var defaultLLMConfig = {
  // Configuration Parameters
  baseURL: "/api/ai-proxy",
  // Base URL for the API endpoint (proxy or custom server)
  timeout: 3e4,
  // Timeout period in milliseconds (default: 30 seconds)
  // organization: "org-123456", // OpenAI organization ID (optional)
  model: "google/gemini-2.0-flash-lite-001",
  // The model to use (e.g., "gpt-3.5-turbo", "gpt-4")
  apiKey: "NONE",
  // API key for authentication (if required)
  metadata: { session_id: "abc123", user_id: "user42" },
  // Custom metadata for tracking or debugging
  // Output Control
  temperature: 0.7,
  // Controls randomness in output (higher = more creative, lower = more deterministic)
  maxTokens: 256,
  // Maximum number of tokens to generate in the response
  topP: 1,
  // Nucleus sampling parameter; limits token sampling to the top-p probability mass
  n: 1,
  // Number of chat completions to generate for each prompt
  stop: ["END"],
  // Stop sequences where the model output is cut off
  logitBias: { 50256: -100 },
  // Adjusts likelihood of specific tokens appearing in the completion
  // Retry and Timeout Parameters
  maxRetries: 3,
  // Maximum number of retries for failed API calls
  requestTimeout: 3e4,
  // Timeout for API requests (in milliseconds)
  // Callback and Metadata Parameters
  callbacks: [],
  // Callbacks to add additional functionality during execution (e.g., logging or streaming)
  callbackManager: void 0,
  // Manages callbacks for tracing and monitoring runs
  // Model-Specific Parameters (`modelKwargs`)
  modelKwargs: {
    frequencyPenalty: 0.2,
    // Penalizes repeated tokens (-2 to +2)
    presencePenalty: 0.3,
    // Penalizes repeated topics (-2 to +2)
    topP: 0.9,
    // Overrides the global topP parameter if needed
    stopSequences: ["END"],
    // Stop sequences specific to this model instance
    logitBias: { 50256: -100 }
    // Suppress specific tokens or adjust their likelihoods
  },
  // Additional Parameters
  cache: true
  // Whether to cache responses for repeated prompts
  // configuration: {
  //   fetch: proxyFetchHandler,
  // },
};

// src/lib/utils.ts
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";
function getWindowLocationOrigin() {
  if (typeof window !== "undefined") {
    return window.location.origin;
  }
  return "";
}

// src/consts.ts
var API_BASE_URL_DEV = getWindowLocationOrigin() + "/api";
var DEFAULT_MODEL = "google/gemini-2.0-flash-lite-001";

// db/config.ts
var llmSettings = { ...defaultLLMConfig, model: DEFAULT_MODEL };
var PromptTemplate = (0, astro_db_exports.defineTable)({
  columns: {
    id: astro_db_exports.column.text({ primaryKey: true }),
    name: astro_db_exports.column.text(),
    description: astro_db_exports.column.text(),
    systemPrompt: astro_db_exports.column.text(),
    template: astro_db_exports.column.text({ optional: true }),
    variables: astro_db_exports.column.json(),
    tags: astro_db_exports.column.json(),
    llmConfig: astro_db_exports.column.json({
      default: JSON.stringify(llmSettings)
    }),
    created_at: astro_db_exports.column.text(),
    updated_at: astro_db_exports.column.text()
  }
});
var ChatSession = (0, astro_db_exports.defineTable)({
  columns: {
    id: astro_db_exports.column.text({ primaryKey: true }),
    messages: astro_db_exports.column.json(),
    // Array of Message objects
    metadata: astro_db_exports.column.json({
      default: {
        topic: "",
        model: "",
        template: null,
        templateId: null
      }
    }),
    created_at: astro_db_exports.column.text(),
    // fixme: use column.date()
    updated_at: astro_db_exports.column.text()
    // created_at: column.date({ default: () => new Date() }),
    // updated_at: column.date({ default: () => new Date() }),
  }
});
var User = (0, astro_db_exports.defineTable)({
  columns: {
    id: astro_db_exports.column.text({ primaryKey: true }),
    email: astro_db_exports.column.text({ unique: true }),
    password: astro_db_exports.column.text(),
    // Will store hashed passwords
    role: astro_db_exports.column.text({ default: "authenticated" }),
    // "authenticated", "moderator", "admin"
    created_at: astro_db_exports.column.text(),
    updated_at: astro_db_exports.column.text()
  }
});
var Comment = (0, astro_db_exports.defineTable)({
  columns: {
    id: astro_db_exports.column.number({ primaryKey: true }),
    likes: astro_db_exports.column.number({ default: 0 }),
    flagged: astro_db_exports.column.boolean({ default: false }),
    // published: column.date({ default: () => new Date() }),
    metadata: astro_db_exports.column.json({ default: {} }),
    authorId: astro_db_exports.column.number({
      references: () => Author.columns.id,
      default: 1
    })
  }
});
var Author = (0, astro_db_exports.defineTable)({
  columns: {
    id: astro_db_exports.column.number({ primaryKey: true }),
    name: astro_db_exports.column.text()
  }
});
var config_default = (0, astro_db_exports.defineDb)({
  tables: { PromptTemplate, ChatSession, Comment, Author, User }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
