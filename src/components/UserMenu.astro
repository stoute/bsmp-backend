---
import { cn } from "@lib/utils";
import { LINKS_DEV } from "@consts";
---

<div class="user-menu-container relative">
  <button
    id="user-button"
    aria-label="User menu"
    class={cn(
      "flex md:flex",
      "size-9 rounded-full p-2 items-center justify-center",
      "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
      "stroke-current hover:stroke-black dark:hover:stroke-white",
      "border border-black/10 dark:border-white/25",
      "transition-colors duration-300 ease-in-out",
    )}
  >
    <!-- Inline SVG instead of using use href -->
    <svg
      class="size-full"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1.5"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="M12 2a5 5 0 015 5v2a5 5 0 01-10 0V7a5 5 0 015-5z"></path>
      <path d="M19 21v-1a7 7 0 00-14 0v1"></path>
    </svg>
  </button>

  <!-- Dropdown menu -->
  <div
    id="user-dropdown"
    class="absolute right-0 mt-2 hidden w-48 rounded-md bg-white shadow-lg dark:bg-neutral-800"
  >
    <!-- Single auth link that changes dynamically -->
    <a
      href="/auth/login"
      id="auth-link"
      class="block px-4 py-2 text-sm text-current hover:bg-black/5 dark:hover:bg-white/20"
    >
      Login
    </a>

    <!-- Admin links container -->
    <div id="admin-links" class="hidden">
      <!-- Admin links will be dynamically inserted here -->
    </div>
  </div>
</div>

<style>
  /* User dropdown styles */
  #user-dropdown {
    z-index: 100;
    transition: all 0.2s ease-in-out;
  }
</style>

<script define:vars={{ LINKS_DEV }}>
  document.addEventListener("DOMContentLoaded", () => {
    const userButton = document.getElementById("user-button");
    const userDropdown = document.getElementById("user-dropdown");
    const userMenuContainer = document.querySelector(".user-menu-container");
    const authLink = document.getElementById("auth-link");
    const adminLinks = document.getElementById("admin-links");
    let isDropdownOpen = false;
    let hoverTimeout = null;

    // Helper functions for dropdown visibility
    function showDropdown() {
      if (hoverTimeout) {
        clearTimeout(hoverTimeout);
        hoverTimeout = null;
      }

      if (userDropdown && userDropdown.classList.contains("hidden")) {
        userDropdown.classList.remove("hidden");
        isDropdownOpen = true;
      }
    }

    function hideDropdown() {
      if (userDropdown) {
        userDropdown.classList.add("hidden");
        isDropdownOpen = false;
      }
    }

    function hideDropdownWithDelay() {
      if (hoverTimeout) {
        clearTimeout(hoverTimeout);
      }

      hoverTimeout = setTimeout(() => {
        if (userMenuContainer && !userMenuContainer.matches(":hover")) {
          hideDropdown();
        }
      }, 150);
    }

    function toggleDropdown() {
      if (isDropdownOpen) {
        hideDropdown();
      } else {
        showDropdown();
      }
    }

    function updateUserMenu() {
      const loggedInStatus = localStorage.getItem("is-logged-in") === "true";
      console.log("Updating user menu, logged in:", loggedInStatus);

      // Update the auth link based on login status
      if (authLink) {
        if (loggedInStatus) {
          // User is logged in - show logout option
          authLink.textContent = "Logout";
          authLink.href = "#";
          authLink.onclick = async (e) => {
            e.preventDefault();
            await handleLogout();
            hideDropdown();
          };
        } else {
          // User is not logged in - show login option
          authLink.textContent = "Login";
          authLink.href = "/auth/login";
          authLink.onclick = null;
        }
      }

      // Handle admin links
      if (adminLinks) {
        const currentUser = JSON.parse(
          localStorage.getItem("current-user") || "{}",
        );

        // Only show admin links if user is logged in and has admin role
        if (loggedInStatus && currentUser && currentUser.role === "admin") {
          adminLinks.innerHTML = ""; // Clear existing links
          adminLinks.classList.remove("hidden");

          // Add LINKS_DEV links
          LINKS_DEV.forEach((link) => {
            const linkElement = document.createElement("a");
            linkElement.href = link.HREF;
            linkElement.className =
              "block px-4 py-2 text-sm text-current hover:bg-black/5 dark:hover:bg-white/20";
            linkElement.textContent = link.TEXT;
            adminLinks.appendChild(linkElement);
          });
        } else {
          // Hide admin links when not logged in or not admin
          adminLinks.classList.add("hidden");
        }
      }
    }

    // Check if device supports hover
    let supportsHover;
    if (typeof window !== "undefined") {
      supportsHover = window.matchMedia("(hover: hover)").matches;
    }

    // Event listeners
    if (supportsHover) {
      // Improved hover handling
      userButton?.addEventListener("mouseenter", showDropdown);
      userDropdown?.addEventListener("mouseenter", showDropdown);
      userMenuContainer?.addEventListener("mouseleave", hideDropdownWithDelay);

      // Add focus handling for accessibility
      userButton?.addEventListener("focus", showDropdown);
      userButton?.addEventListener("blur", hideDropdownWithDelay);
    } else {
      userButton?.addEventListener("click", toggleDropdown);
    }

    // Close dropdown when clicking outside
    document.addEventListener("click", (event) => {
      if (
        userButton &&
        !userButton.contains(event.target) &&
        userDropdown &&
        !userDropdown.contains(event.target)
      ) {
        hideDropdown();
      }
    });

    // Update on login state changes
    window.addEventListener("login-state-changed", updateUserMenu);

    // Update on storage events (for cross-tab synchronization)
    window.addEventListener("storage", (event) => {
      if (
        event.key === "is-logged-in"
        // event.key === "is-logged-in" ||
        // event.key === "app-state:currentUser"
      ) {
        updateUserMenu();
      }
    });

    // Initial update
    updateUserMenu();
  });

  async function handleLogout() {
    try {
      await fetch("/api/auth/logout.json", {
        method: "POST",
      });

      // Update localStorage directly
      localStorage.setItem("is-logged-in", "false");

      // Dispatch custom event for navigation update
      window.dispatchEvent(new CustomEvent("login-state-changed"));

      // Redirect to home page
      window.location.href = "/";
    } catch (error) {
      console.error("Logout error:", error);
    }
  }
</script>
