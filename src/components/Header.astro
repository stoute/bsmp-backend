---
import { SITE, LINKS, LINKS_DEV, SOCIALS } from "@consts";
import { cn } from "@lib/utils";
const { pathname } = Astro.url;
const subpath = pathname.match(/[^/]+/g);
import Container from "@components/Container.astro";
import LogoLight from "@images/logo-light.svg";
import LogoDark from "@images/logo-dark.svg";
import SessionsList from "@components/sessions/SessionsList";
import UserMenu from "@components/UserMenu.astro";

interface Props {
  colorMode?: "light" | "dark" | "system";
}

const { colorMode } = Astro.props;
const EMAIL: unknown = SOCIALS.find((SOCIAL) => SOCIAL.NAME === "Email");
const environment: string = import.meta.env.MODE;

// Handle links based on environment
const navigationLinks = LINKS;
---

<header id="header" class="fixed top-0 z-50 h-16 w-full">
  <Container size="md">
    <div class="relative h-full w-full">
      <div
        class="absolute top-1/2 left-0 flex -translate-y-1/2 gap-1 font-semibold"
      >
        <a
          href="/"
          class="flex gap-1 text-current transition-colors duration-300 ease-in-out hover:text-black dark:hover:text-white"
        >
          <LogoLight class="block h-8 w-auto dark:hidden" />
          <LogoDark class="hidden h-8 w-auto dark:block" />
          <div class="pt-1 pl-3">
            {SITE.TITLE}
          </div>
        </a>
      </div>

      <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
        <nav class="hidden items-center justify-center gap-1 text-sm md:flex">
          {
            navigationLinks.map((LINK) => (
              <a
                href={LINK.HREF}
                class={cn(
                  "h-8 rounded-full px-3 text-current",
                  "flex items-center justify-center",
                  "transition-colors duration-300 ease-in-out",
                  pathname === LINK.HREF || "/" + subpath?.[0] === LINK.HREF
                    ? "bg-black text-white dark:bg-white dark:text-black"
                    : "hover:bg-black/5 hover:text-black dark:hover:bg-white/20 dark:hover:text-white",
                )}
              >
                {LINK.TEXT}
              </a>
            ))
          }
        </nav>
      </div>

      <div class="buttons absolute top-1/2 right-0 flex -translate-y-1/2 gap-1">
        <SessionsList client:load />

        <!-- Use the UserMenu component -->
        <UserMenu />

        <button
          id="header-theme-button"
          onclick="changeTheme()"
          aria-label={`Toggle light and dark theme`}
          class={cn(
            "hidden md:flex",
            "size-9 rounded-full p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black dark:hover:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
            // Only hide the button when colorMode is "light" or "dark"
            (colorMode === "light" || colorMode === "dark") &&
              "!hidden md:!hidden",
          )}
        >
          <svg class="block size-full dark:hidden">
            <use href="/ui.svg#sun"></use>
          </svg>
          <svg class="hidden size-full dark:block">
            <use href="/ui.svg#moon"></use>
          </svg>
        </button>

        <button
          id="header-drawer-button"
          aria-label={`Toggle drawer open and closed`}
          class={cn(
            "flex md:hidden",
            "size-9 rounded-full p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black dark:hover:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
          )}
        >
          <svg id="drawer-open" class="size-full">
            <use href="/ui.svg#menu"></use>
          </svg>
          <svg id="drawer-close" class="size-full">
            <use href="/ui.svg#x"></use>
          </svg>
        </button>
      </div>
    </div>
  </Container>
</header>

<style>
  #header-drawer-button > #drawer-open {
    @apply block;
  }

  #header-drawer-button > #drawer-close {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-open {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-close {
    @apply block;
  }
</style>

<!--<script>-->
<!--  // Expose LINKS_DEV to client-side JavaScript-->
<!--  document.addEventListener("DOMContentLoaded", () => {-->
<!--    window.LINKS_DEV = window.LINKS_DEV || [];-->
<!--  });-->
<!--</script>-->

<!--&lt;!&ndash; Expose LINKS_DEV to client-side JavaScript &ndash;&gt;-->
<!--<script define:vars={{ LINKS_DEV }}>-->
<!--  window.LINKS_DEV = LINKS_DEV;-->
<!--</script>-->
