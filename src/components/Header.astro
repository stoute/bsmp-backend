---
import { SITE, LINKS, LINKS_DEV, SOCIALS } from "@consts";
import { cn } from "@lib/utils";
const { pathname } = Astro.url;
const subpath = pathname.match(/[^/]+/g);
import Container from "@components/Container.astro";
import LogoLight from "@images/logo-light.svg";
import LogoDark from "@images/logo-dark.svg";
import SessionsList from "@components/sessions/SessionsList";

interface Props {
  colorMode?: "light" | "dark" | "system";
}

const { colorMode } = Astro.props;
const EMAIL: unknown = SOCIALS.find((SOCIAL) => SOCIAL.NAME === "Email");
const environment: string = import.meta.env.MODE;

// Handle links based on environment
const navigationLinks =
  environment === "development" ? [...LINKS, ...LINKS_DEV] : LINKS;
---

<header id="header" class="fixed top-0 z-50 h-16 w-full">
  <Container size="md">
    <div class="relative h-full w-full">
      <div
        class="absolute top-1/2 left-0 flex -translate-y-1/2 gap-1 font-semibold"
      >
        <a
          href="/"
          class="flex gap-1 text-current transition-colors duration-300 ease-in-out hover:text-black dark:hover:text-white"
        >
          <LogoLight class="block h-8 w-auto dark:hidden" />
          <LogoDark class="hidden h-8 w-auto dark:block" />
          <div class="pt-1 pl-3">
            {SITE.TITLE}
          </div>
        </a>
      </div>

      <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
        <nav class="hidden items-center justify-center gap-1 text-sm md:flex">
          {
            navigationLinks.map((LINK) => (
              <a
                href={LINK.HREF}
                class={cn(
                  "h-8 rounded-full px-3 text-current",
                  "flex items-center justify-center",
                  "transition-colors duration-300 ease-in-out",
                  pathname === LINK.HREF || "/" + subpath?.[0] === LINK.HREF
                    ? "bg-black text-white dark:bg-white dark:text-black"
                    : "hover:bg-black/5 hover:text-black dark:hover:bg-white/20 dark:hover:text-white",
                )}
              >
                {LINK.TEXT}
              </a>
            ))
          }
        </nav>
      </div>

      <div class="buttons absolute top-1/2 right-0 flex -translate-y-1/2 gap-1">
        <SessionsList client:load />

        <!-- Replace the login button with a user button that's always visible -->
        <div class="user-menu-container relative">
          <button
            id="user-button"
            aria-label="User menu"
            class={cn(
              "flex md:flex",
              "size-9 rounded-full p-2 items-center justify-center",
              "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
              "stroke-current hover:stroke-black dark:hover:stroke-white",
              "border border-black/10 dark:border-white/25",
              "transition-colors duration-300 ease-in-out",
            )}
          >
            <!-- Inline SVG instead of using use href -->
            <svg
              class="size-full"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="1.5"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M12 2a5 5 0 015 5v2a5 5 0 01-10 0V7a5 5 0 015-5z"></path>
              <path d="M19 21v-1a7 7 0 00-14 0v1"></path>
            </svg>
          </button>

          <!-- Dropdown menu -->
          <div
            id="user-dropdown"
            class="absolute right-0 mt-2 hidden w-48 rounded-md bg-white shadow-lg dark:bg-neutral-800"
          >
            <!-- Single auth link that changes dynamically -->
            <a
              href="/auth/login"
              id="auth-link"
              class="block px-4 py-2 text-sm text-current hover:bg-black/5 dark:hover:bg-white/20"
            >
              Login
            </a>

            <!-- Admin links container -->
            <div id="admin-links" class="hidden">
              <!-- Admin links will be dynamically inserted here -->
            </div>
          </div>
        </div>

        <button
          id="header-theme-button"
          onclick="changeTheme()"
          aria-label={`Toggle light and dark theme`}
          class={cn(
            "hidden md:flex",
            "size-9 rounded-full p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black dark:hover:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
            // Only hide the button when colorMode is "light" or "dark"
            (colorMode === "light" || colorMode === "dark") &&
              "!hidden md:!hidden",
          )}
        >
          <svg class="block size-full dark:hidden">
            <use href="/ui.svg#sun"></use>
          </svg>
          <svg class="hidden size-full dark:block">
            <use href="/ui.svg#moon"></use>
          </svg>
        </button>

        <button
          id="header-drawer-button"
          aria-label={`Toggle drawer open and closed`}
          class={cn(
            "flex md:hidden",
            "size-9 rounded-full p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black dark:hover:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
          )}
        >
          <svg id="drawer-open" class="size-full">
            <use href="/ui.svg#menu"></use>
          </svg>
          <svg id="drawer-close" class="size-full">
            <use href="/ui.svg#x"></use>
          </svg>
        </button>
      </div>
    </div>
  </Container>
</header>

<style>
  #header-drawer-button > #drawer-open {
    @apply block;
  }

  #header-drawer-button > #drawer-close {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-open {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-close {
    @apply block;
  }

  /* User dropdown styles */
  #user-dropdown {
    z-index: 100;
    transition: all 0.2s ease-in-out;
  }

  /* No hover styles here - we'll handle this with JavaScript */
</style>

<script>
  import { isLoggedIn, appState, logout } from "../lib/appStore";

  document.addEventListener("DOMContentLoaded", () => {
    const userButton = document.getElementById("user-button");
    const userDropdown = document.getElementById("user-dropdown");
    const userMenuContainer = document.querySelector(".user-menu-container");
    const authLink = document.getElementById("auth-link");
    const adminLinks = document.getElementById("admin-links");
    let isDropdownOpen = false;

    // Helper functions for dropdown visibility
    function showDropdown() {
      if (userDropdown && userDropdown.classList.contains("hidden")) {
        userDropdown.classList.remove("hidden");
        isDropdownOpen = true;
      }
    }

    function hideDropdown() {
      if (userDropdown) {
        userDropdown.classList.add("hidden");
        isDropdownOpen = false;
      }
    }

    function hideDropdownWithDelay() {
      setTimeout(() => {
        if (userMenuContainer && !userMenuContainer.matches(":hover")) {
          hideDropdown();
        }
      }, 100);
    }

    function toggleDropdown() {
      if (isDropdownOpen) {
        hideDropdown();
      } else {
        showDropdown();
      }
    }

    function updateUserMenu() {
      const loggedInStatus = isLoggedIn.get();
      console.log("Updating user menu, logged in:", loggedInStatus);

      // Update the auth link based on login status
      if (authLink) {
        if (loggedInStatus) {
          // User is logged in - show logout option
          authLink.textContent = "Logout";
          authLink.href = "#";
          authLink.onclick = async (e) => {
            e.preventDefault();
            await logout();
            hideDropdown();
          };
        } else {
          // User is not logged in - show login option
          authLink.textContent = "Login";
          authLink.href = "/auth/login";
          authLink.onclick = null;
        }
      }

      // Handle admin links
      if (adminLinks) {
        const currentUser = appState.get().currentUser;

        // Only show admin links if user is logged in and has admin role
        if (loggedInStatus && currentUser && currentUser.role === "admin") {
          adminLinks.innerHTML = ""; // Clear existing links
          adminLinks.classList.remove("hidden");

          // Get LINKS_DEV from window
          if (window.LINKS_DEV) {
            window.LINKS_DEV.forEach((link) => {
              const linkElement = document.createElement("a");
              linkElement.href = link.HREF;
              linkElement.className =
                "block px-4 py-2 text-sm text-current hover:bg-black/5 dark:hover:bg-white/20";
              linkElement.textContent = link.TEXT;
              adminLinks.appendChild(linkElement);
            });
          }
        } else {
          // Hide admin links when not logged in or not admin
          adminLinks.classList.add("hidden");
        }
      }
    }

    // Check if device supports hover
    const supportsHover = window.matchMedia("(hover: hover)").matches;

    // Event listeners
    if (supportsHover) {
      userButton?.addEventListener("mouseenter", showDropdown);
      userMenuContainer?.addEventListener("mouseenter", showDropdown);
      userMenuContainer?.addEventListener("mouseleave", hideDropdownWithDelay);
    } else {
      userButton?.addEventListener("click", toggleDropdown);
    }

    // Close dropdown when clicking outside
    document.addEventListener("click", (event) => {
      if (
        userButton &&
        !userButton.contains(event.target as Node) &&
        userDropdown &&
        !userDropdown.contains(event.target as Node)
      ) {
        hideDropdown();
      }
    });

    // Subscribe to changes in login state
    const unsubscribe = isLoggedIn.subscribe((value) => {
      console.log("isLoggedIn changed:", value);
      updateUserMenu();
    });

    // Also check the initial state after a short delay
    // This ensures the persistent atom has had time to load from storage
    setTimeout(() => {
      updateUserMenu();
    }, 100);

    // Clean up subscription when component is unmounted
    window.addEventListener("beforeunload", () => {
      unsubscribe();
    });
  });
</script>

<!-- Expose LINKS_DEV to client-side JavaScript -->
<script define:vars={{ LINKS_DEV }}>
  window.LINKS_DEV = LINKS_DEV;
</script>
