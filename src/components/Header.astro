---
import { SITE, LINKS, LINKS_AUTHENTICATED, SOCIALS } from "@consts";
import { cn } from "@lib/utils";
const { pathname } = Astro.url;
const subpath = pathname.match(/[^/]+/g);
import Container from "@components/Container.astro";
import LogoLight from "@images/logo-light.svg";
import LogoDark from "@images/logo-dark.svg";
import SessionsList from "./chat/SessionsList";
import UserMenu from "@components/UserMenu.astro";

interface Props {
  colorMode?: "light" | "dark" | "system";
}
// Import Paraglide messages
import {
  language_english,
  language_german,
  language_dutch,
  toggle_theme,
  // select_language
} from "../paraglide/messages";

const { colorMode } = Astro.props;
const EMAIL: unknown = SOCIALS.find((SOCIAL) => SOCIAL.NAME === "Email");
const environment: string = import.meta.env.MODE;

// Initial server-side rendering will just show LINKS
// Client-side JS will update this based on login state
const navigationLinks = LINKS;
---

<header id="header" class="fixed top-0 z-50 h-16 w-full">
  <Container size="md">
    <div class="relative h-full w-full">
      <div
        class="absolute top-1/2 left-0 flex -translate-y-1/2 gap-1 font-semibold"
      >
        <a
          href="/"
          class="flex gap-1 text-current transition-colors duration-300 ease-in-out hover:text-black dark:hover:text-white"
        >
          <LogoLight class="block h-8 w-auto dark:hidden" />
          <LogoDark class="hidden h-8 w-auto dark:block" />
          <div class="pt-1 pl-3">
            {SITE.TITLE}
          </div>
        </a>
      </div>

      <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
        <nav
          id="navigation-links"
          class="hidden items-center justify-center gap-1 text-sm md:flex"
        >
          {
            navigationLinks.map((LINK) => (
              <a
                href={LINK.HREF}
                class={cn(
                  "h-8 rounded-full px-3 text-current",
                  "flex items-center justify-center",
                  "transition-colors duration-300 ease-in-out",
                  pathname === LINK.HREF || "/" + subpath?.[0] === LINK.HREF
                    ? "bg-black text-white dark:bg-white dark:text-black"
                    : "hover:bg-black/5 hover:text-black dark:hover:bg-white/20 dark:hover:text-white",
                )}
              >
                {LINK.TEXT}
              </a>
            ))
          }
        </nav>
      </div>

      <div class="buttons absolute top-1/2 right-0 flex -translate-y-1/2 gap-2">
        <SessionsList client:load />

        <!-- Use the UserMenu component -->
        <UserMenu />

        <!-- Language Selector Button -->
        <div class="language-menu-container relative">
          <button
            id="language-button"
            aria-label="Language menu"
            class={cn(
              "flex md:flex",
              "size-9 rounded-full p-2 items-center justify-center",
              "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
              "stroke-current hover:stroke-black dark:hover:stroke-white",
              "border border-black/10 dark:border-white/25",
              "transition-colors duration-300 ease-in-out",
            )}
          >
            <svg
              class="size-full"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="1.5"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path
                d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"
              ></path>
              <path d="M2 12h20"></path>
              <path
                d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"
              ></path>
            </svg>
          </button>

          <!-- Language dropdown menu -->
          <div
            id="language-dropdown"
            class="absolute right-0 mt-2 hidden w-48 rounded-md bg-white shadow-lg dark:bg-neutral-800"
          >
            <a
              href="#"
              data-language="en"
              class="block px-4 py-2 text-sm text-current hover:bg-black/5 dark:hover:bg-white/20"
            >
              English
            </a>
            <a
              href="#"
              data-language="de"
              class="block px-4 py-2 text-sm text-current hover:bg-black/5 dark:hover:bg-white/20"
            >
              Deutsch
            </a>
            <a
              href="#"
              data-language="nl"
              class="block px-4 py-2 text-sm text-current hover:bg-black/5 dark:hover:bg-white/20"
            >
              Nederlands
            </a>
          </div>
        </div>

        <button
          id="header-theme-button"
          onclick="changeTheme()"
          aria-label={toggle_theme()}
          class={cn(
            "hidden md:flex",
            "size-9 rounded-full p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black dark:hover:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
            // Only hide the button when colorMode is "light" or "dark"
            (colorMode === "light" || colorMode === "dark") &&
              "!hidden md:!hidden",
          )}
        >
          <svg class="block size-full dark:hidden">
            <use href="/ui.svg#sun"></use>
          </svg>
          <svg class="hidden size-full dark:block">
            <use href="/ui.svg#moon"></use>
          </svg>
        </button>

        <button
          id="header-drawer-button"
          aria-label={`Toggle drawer open and closed`}
          class={cn(
            "flex md:hidden",
            "size-9 rounded-full p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black dark:hover:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
          )}
        >
          <svg id="drawer-open" class="size-full">
            <use href="/ui.svg#menu"></use>
          </svg>
          <svg id="drawer-close" class="size-full">
            <use href="/ui.svg#x"></use>
          </svg>
        </button>
      </div>
    </div>
  </Container>
</header>

<style>
  #header-drawer-button > #drawer-open {
    @apply block;
  }

  #header-drawer-button > #drawer-close {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-open {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-close {
    @apply block;
  }

  /* Language dropdown styles */
  #language-dropdown {
    z-index: 100;
    transition: all 0.2s ease-in-out;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const drawerButton = document.getElementById("header-drawer-button");
    const drawer = document.getElementById("drawer");

    if (drawerButton && drawer) {
      drawerButton.addEventListener("click", () => {
        drawerButton.classList.toggle("open");
        drawer.classList.toggle("open");

        // Prevent scrolling when drawer is open
        if (drawer.classList.contains("open")) {
          document.body.style.overflow = "hidden";
        } else {
          document.body.style.overflow = "";
        }
      });
    }
  });
</script>

<!-- Language selector script -->
<script>
  import { setLocale, getLocale } from "../paraglide/runtime.js";

  function initializeLanguageMenu() {
    const languageButton = document.getElementById("language-button");
    const languageDropdown = document.getElementById("language-dropdown");
    const languageLinks = document.querySelectorAll("[data-language]");
    let closeTimeout = null;

    // Toggle dropdown on button click
    languageButton?.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      languageDropdown?.classList.toggle("hidden");
    });

    // Handle mouse enter/leave for both button and dropdown
    languageButton?.addEventListener("mouseenter", () => {
      if (closeTimeout) {
        clearTimeout(closeTimeout);
        closeTimeout = null;
      }
      languageDropdown?.classList.remove("hidden");
    });

    languageButton?.addEventListener("mouseleave", () => {
      closeTimeout = setTimeout(() => {
        languageDropdown?.classList.add("hidden");
      }, 300);
    });

    languageDropdown?.addEventListener("mouseenter", () => {
      if (closeTimeout) {
        clearTimeout(closeTimeout);
        closeTimeout = null;
      }
    });

    languageDropdown?.addEventListener("mouseleave", () => {
      languageDropdown.classList.add("hidden");
    });

    // Handle language selection
    languageLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const language = link.getAttribute("data-language");
        if (language) {
          // Set the new locale using Paraglide's setLocale function
          setLocale(language);
          // The page will reload by default due to setLocale behavior
        }
      });
    });

    // Highlight current language
    try {
      const currentLocale = getLocale();
      const currentLanguageLink = document.querySelector(
        `[data-language="${currentLocale}"]`,
      );
      if (currentLanguageLink) {
        currentLanguageLink.classList.add(
          "font-semibold",
          "bg-black/5",
          "dark:bg-white/10",
        );
      }
    } catch (error) {
      console.error("Error getting current locale:", error);
    }

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      if (
        languageDropdown &&
        !languageDropdown.contains(e.target as Node) &&
        !languageButton?.contains(e.target as Node)
      ) {
        languageDropdown.classList.add("hidden");
      }
    });
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", initializeLanguageMenu);

  // Re-initialize after Astro view transitions
  document.addEventListener("astro:page-load", initializeLanguageMenu);
  document.addEventListener("astro:after-swap", initializeLanguageMenu);
</script>

<!-- Expose links to client-side JavaScript -->
<script define:vars={{ LINKS, LINKS_AUTHENTICATED }}>
  window.LINKS_AUTHENTICATED = LINKS_AUTHENTICATED;
  window.LINKS = LINKS;

  function updateNavigationLinks() {
    // Check if user is logged in by looking at localStorage
    const isLoggedIn = localStorage.getItem("is-logged-in") === "true";

    // Get the navigation container
    const navContainer = document.getElementById("navigation-links");
    if (!navContainer) return;

    // Store the current links state in a data attribute to preserve during transitions
    navContainer.dataset.linksState = isLoggedIn ? "authenticated" : "default";

    // Clear existing links
    navContainer.innerHTML = "";

    // Determine which links to show
    const linksToShow = isLoggedIn ? [...LINKS, ...LINKS_AUTHENTICATED] : LINKS;

    // Get current path for active state
    const pathname = window.location.pathname;
    const subpath = pathname.match(/[^/]+/g);

    // Add links to navigation
    linksToShow.forEach((link) => {
      const isActive =
        pathname === link.HREF || "/" + (subpath?.[0] || "") === link.HREF;

      const linkElement = document.createElement("a");
      linkElement.href = link.HREF;
      linkElement.textContent = link.TEXT;
      linkElement.className = [
        "h-8 rounded-full px-3 text-current",
        "flex items-center justify-center",
        "transition-colors duration-300 ease-in-out",
        isActive
          ? "bg-black text-white dark:bg-white dark:text-black"
          : "hover:bg-black/5 hover:text-black dark:hover:bg-white/20 dark:hover:text-white",
      ].join(" ");

      navContainer.appendChild(linkElement);
    });
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", updateNavigationLinks);

  // Update after Astro view transitions
  document.addEventListener("astro:after-swap", () => {
    // Short delay to ensure DOM is ready
    setTimeout(updateNavigationLinks, 10);
  });

  // Also update before the transition starts to ensure links are preserved
  document.addEventListener("astro:before-preparation", updateNavigationLinks);

  // Update when login state changes
  window.addEventListener("login-state-changed", updateNavigationLinks);

  // Update on storage events (for cross-tab synchronization)
  window.addEventListener("storage", (event) => {
    if (event.key === "is-logged-in") {
      updateNavigationLinks();
    }
  });

  // Also update when the nanostores isLoggedIn atom changes
  if (typeof window !== "undefined" && window.nanostores) {
    window.nanostores.isLoggedIn.listen(() => {
      updateNavigationLinks();
    });
  }
</script>
