---
import { SITE, LINKS, SOCIALS } from "@consts";
import { cn, parseLinks } from "@lib/utils";
const { pathname } = Astro.url;
const subpath = pathname.match(/[^/]+/g);
import Container from "@components/Container.astro";
import LogoLight from "@/images/logo-light.svg";
import LogoDark from "@/images/logo-dark.svg";

interface Props {
  colorMode?: "light" | "dark" | "system";
}

const { colorMode } = Astro.props;
const EMAIL: unknown = SOCIALS.find((SOCIAL) => SOCIAL.NAME === "Email");
const environment: string = import.meta.env.MODE;
---

<header id="header" class="fixed top-0 z-50 h-16 w-full">
  <Container size="md">
    <div class="relative h-full w-full">
      <div
        class="absolute top-1/2 left-0 flex -translate-y-1/2 gap-1 font-semibold"
      >
        <a
          href="/"
          class="flex gap-1 text-current transition-colors duration-300 ease-in-out hover:text-black dark:hover:text-white"
        >
          <LogoLight class="block h-8 w-auto dark:hidden" />
          <LogoDark class="hidden h-8 w-auto dark:block" />
          <div class="pt-1 pl-3">
            {SITE.TITLE}
          </div>
        </a>
      </div>

      <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
        <nav class="hidden items-center justify-center gap-1 text-sm md:flex">
          {
            parseLinks(LINKS, environment).map((LINK, index) => (
              <a
                href={LINKS[index].HREF}
                class={cn(
                  "h-8 rounded-full px-3 text-current",
                  "flex items-center justify-center",
                  "transition-colors duration-300 ease-in-out",
                  pathname === LINK.HREF || "/" + subpath?.[0] === LINK.HREF
                    ? "bg-black text-white dark:bg-white dark:text-black"
                    : "hover:bg-black/5 hover:text-black dark:hover:bg-white/20 dark:hover:text-white",
                )}
              >
                {LINKS[index].TEXT}
              </a>
            ))
          }
        </nav>
      </div>

      <div class="buttons absolute top-1/2 right-0 flex -translate-y-1/2 gap-1">
        <!--<a href="/search" aria-label={`Search blog posts and projects on ${SITE.TITLE}`} class={cn("hidden md:flex", "size-9 rounded-full p-2 items-center justify-center", "bg-transparent hover:bg-black/5 dark:hover:bg-white/20", "stroke-current hover:stroke-black dark:hover:stroke-white", "border border-black/10 dark:border-white/25", "transition-colors duration-300 ease-in-out", pathname === "/search" || "/" + subpath?.[0] === "/search" ? "pointer-events-none bg-black dark:bg-white text-white dark:text-black" : "")}>-->
        <!--  <svg class="size-full">-->
        <!--    <use href="/ui.svg#search"></use>-->
        <!--  </svg>-->
        <!--</a>-->

        <!--<a href="/rss.xml" target="_blank" aria-label={`Rss feed for ${SITE.TITLE}`} class={cn("hidden md:flex", "size-9 rounded-full p-2 items-center justify-center", "bg-transparent hover:bg-black/5 dark:hover:bg-white/20", "stroke-current hover:stroke-black dark:hover:stroke-white", "border border-black/10 dark:border-white/25", "transition-colors duration-300 ease-in-out")}>-->
        <!--  <svg class="size-full">-->
        <!--    <use href="/ui.svg#rss"></use>-->
        <!--  </svg>-->
        <!--</a>-->

        <button
          id="header-theme-button"
          onclick="changeTheme()"
          aria-label={`Toggle light and dark theme`}
          class={cn(
            "hidden md:flex",
            "size-9 rounded-full p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black dark:hover:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
            // Only hide the button when colorMode is "light" or "dark"
            (colorMode === "light" || colorMode === "dark") &&
              "!hidden md:!hidden",
          )}
        >
          <svg class="block size-full dark:hidden">
            <use href="/ui.svg#sun"></use>
          </svg>
          <svg class="hidden size-full dark:block">
            <use href="/ui.svg#moon"></use>
          </svg>
        </button>

        <button
          id="header-drawer-button"
          aria-label={`Toggle drawer open and closed`}
          class={cn(
            "flex md:hidden",
            "size-9 rounded-full p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black dark:hover:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
          )}
        >
          <svg id="drawer-open" class="size-full">
            <use href="/ui.svg#menu"></use>
          </svg>
          <svg id="drawer-close" class="size-full">
            <use href="/ui.svg#x"></use>
          </svg>
        </button>
      </div>
    </div>
  </Container>
</header>

<style>
  #header-drawer-button > #drawer-open {
    @apply block;
  }

  #header-drawer-button > #drawer-close {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-open {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-close {
    @apply block;
  }
</style>

<script is:inline>
  function toggleDrawer() {
    const drawer = document.getElementById("drawer");
    const drawerButton = document.getElementById("header-drawer-button");
    drawer?.classList.toggle("open");
    drawerButton?.classList.toggle("open");
  }

  function initializeDrawerButton() {
    const drawerButton = document.getElementById("header-drawer-button");
    drawerButton?.addEventListener("click", toggleDrawer);
  }

  document.addEventListener("astro:after-swap", initializeDrawerButton);
  initializeDrawerButton();
</script>
